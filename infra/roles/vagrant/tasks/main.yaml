- name: Make vagrant tmp folder
  ansible.builtin.file:
    path: "{{ playbook_dir }}/vagrant/.vagrant"
    state: directory
    mode: '0755'

- fail: msg="Operation is not defined"
  when: (operation is undefined or operation|length == 0)

- fail: msg="Environment is not defined"
  when: (env is undefined or env|length == 0)

- name: Create Ansible inventory
  template:
    src: templates/vagrant-hosts.j2
    dest: "{{ playbook_dir }}/vagrant/.vagrant/hosts.yaml"
    trim_blocks: true
  when: (operation == "init")
      
- name: Make inventory folder
  ansible.builtin.file:
    path: "{{ playbook_dir }}/inventory"
    state: directory
    mode: '0755'
  when: (operation == "init")

- name: Create Ansible inventory
  template:
    src: templates/k3s-cluster-inventory.j2
    dest: "{{ playbook_dir }}/inventory/k3s-cluster-inventory.yaml"
    trim_blocks: true
  when: (operation == "init")

- name: Check Vagrant output file exists
  ansible.builtin.stat: "path={{ playbook_dir }}/vagrant/.vagrant/output"
  register: output_file_exists
  when: (operation == "bootstrap")

- fail: msg="Vagrant output file .vagrant/output does not exist"
  when: (operation == "bootstrap" and not output_file_exists.stat.exists)

- name: Create DHCP IP file comment
  ansible.builtin.shell:
    cmd: "echo '#auto generated by vagrant role' > dhcp_ips.yaml"
  when: (operation == "bootstrap")
  args:
    chdir: "{{ playbook_dir }}/vagrant/.vagrant"

- name: Create DHCP IPs file
  ansible.builtin.shell:
    cmd: "cat output | grep \"SSH address\" | sed -r \"s/ *([a-z0-9-]*)[: a-zA-Z]*([0-9]*.[0-9]*.[0-9]*.[0-9]*).*/\\1: \\2/\" >> dhcp_ips.yaml"
  when: (operation == "bootstrap")
  args:
    chdir: "{{ playbook_dir }}/vagrant/.vagrant"

- name: Show DHCP IPs
  debug:
    msg: "{{ dhcp_ips }}"
  vars:
    dhcp_ips: "{{ lookup('file', 'vagrant/.vagrant/dhcp_ips.yaml') | from_yaml }}"
  when: (operation == "bootstrap")

- name: Make vagrant tmp folder
  ansible.builtin.file:
    path: "{{ playbook_dir }}/vagrant/.vagrant/scripts"
    state: directory
    mode: '0755'

#Runs bootstrap scripts in each VM shell. Reads for Vagrant output assigned IP addresses and reads inventory file
#to get static IP to be assigned.
- name: Create Bootstrap remote scripts
  template:
    src: templates/bootstrap.j2
    dest: "{{ playbook_dir }}/vagrant/.vagrant/scripts/bootstrap-{{f_name}}.sh"
    trim_blocks: true
  when: (operation == "bootstrap")
  vars:
    ssh_host: "{{ inventory[env].ssh_host }}"
    network_type: "{{ inventory[env].network.type }}"
    f_name: "{{ item.key }}-{{ env }}"
  with_dict: "{{ inventory[env].hosts }}"

- name: Create Netplan remote scripts
  template:
    src: templates/netplan.j2
    dest: "{{ playbook_dir }}/vagrant/.vagrant/scripts/netplan-{{f_name}}.yaml"
    trim_blocks: true
  when: (operation == "bootstrap")
  vars:
    static_ip: "{{ item.value }}"
    gateway: "{{ inventory[env].gateway }}"
    net_int: "{{ inventory[env].network.interface }}"
    f_name: "{{ item.key }}-{{ env }}"
  with_dict: "{{ inventory[env].hosts }}"

- name: Create upload script
  template:
    src: templates/upload.j2
    dest: "{{ playbook_dir }}/vagrant/.vagrant/scripts/upload-{{env}}.sh"
    trim_blocks: true
  when: (operation == "bootstrap")
  vars:
    dhcp_ips: "{{ lookup('ansible.builtin.file', 'vagrant/.vagrant/dhcp_ips.yaml') | from_yaml }}"

#- name: Bootstrap VMs
#  ansible.builtin.shell:
#    cmd:
#      echo "export IP_ADDR={{static_ip}}; export GATE={{gateway}}" > ".vagrant/env-{{name}}.sh"
#
#      echo "scp -i ~/.vagrant.d/insecure_private_key scripts/bootstrap.sh vagrant@{{dhcp_ip}}:/home/vagrant/" >> ".vagrant/bootstrap-{{env}}.sh"
#      echo "scp -i ~/.vagrant.d/insecure_private_key scripts/netplan.sh vagrant@{{dhcp_ip}}:/home/vagrant/" >> ".vagrant/bootstrap-{{env}}.sh"
#      echo "scp -i ~/.vagrant.d/insecure_private_key .vagrant/env-{{name}}.sh vagrant@{{dhcp_ip}}:/home/vagrant/" >> ".vagrant/bootstrap-{{env}}.sh"
#  when: (operation == "bootstrap")
#  vars:
#    name: "{{ item.key }}"
#    static_ip: "{{ item.value }}"
#    gateway: "{{ inventory[env].gateway }}"
#    dhcp_ip: "{{ dhcp_ips[f_name] }}"
#    f_name: "{{ item.key }}-{{ env }}"
#    dhcp_ips: "{{ lookup('ansible.builtin.file', 'vagrant/.vagrant/dhcp_ips.yaml') | from_yaml }}"
#  with_dict: "{{ inventory[env].hosts }}"
#  args:
#    chdir: "{{ playbook_dir }}/vagrant"
#  register: output
#
